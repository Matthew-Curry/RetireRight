version: 0.2
phases:
  build:
    commands:
      - echo "Building the lambda backend.."

      # Build lambda layer artifacts
      - echo "Building the lambda layers.."
      - cd backend

      - cd layers
      - mkdir python

      - echo "Building the domain layer.."
      - cp domain python/ -r
      - zip -r ../domain.zip ./python/
      - rm -rf python/*

      - echo "Building the dynamo_utils layer.."
      - cp dynamo_utils python/ -r
      - zip -r ../dynamo_utils.zip ./python/
      - rm -rf python/*

      - echo "Building the simulator layer.."
      - cp simulator python/ -r
      - zip -r ../simulator.zip ./python/
      - rm -rf python/*

      - echo "Building the writer layer.."
      - cp writer python/ -r
      - zip -r ../writer.zip ./python/
      - rm -rf python/*

      - cd ..
    
      # Build lambda function artifacts
      - echo "Building the lambda functions.."
      - cd lambda_handlers

      - mkdir deployment_package

      - echo "Building the create user lambda"
      #- cp create-user-lambda.py deployment_package
      #- zip -r ../create-user-deployment.zip ./deployment_package/
      #- cp create-user-lambda.py ../create-user-lambda.py
      - zip ../create-user-deployment.zip create-user-lambda.py
      #- rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp delete-scenario-lambda.py deployment_package
      - zip -r ../delete-scenario-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp get-scenario-lambda.py deployment_package
      - zip -r ../get-scenario-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp get-scenarios-lambda.py deployment_package
      - zip -r ../get-scenarios-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp get-user-lambda.py deployment_package
      - zip -r ../get-user-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp patch-scenario-lambda.py deployment_package
      - zip -r ../patch-scenario-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp patch-user-lambda.py deployment_package
      - zip -r ../patch-user-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - echo "Building the create user lambda"
      - cp post-scenario-lambda.py deployment_package
      - zip -r ../post-scenario-deployment.zip ./deployment_package/
      - rm -f deployment_package/*

      - cd ..
  
  post_build:
    commands: 
      - echo "Publishing the lambda layers"

      - echo "Publishing the domain layer.."
      - aws lambda publish-layer-version --layer-name RetireRightDomain --zip-file fileb://domain.zip --compatible-architectures x86_64 --compatible-runtimes python3.9

      - echo "Publishing the dynamo_utils layer.."
      - aws lambda publish-layer-version --layer-name RetireRightDynamoUtils --zip-file fileb://dynamo_utils.zip --compatible-architectures x86_64 --compatible-runtimes python3.9

      - echo "Publishing the writer layer.."
      - aws lambda publish-layer-version --layer-name RetireRightWriter --zip-file fileb://writer.zip --compatible-architectures x86_64 --compatible-runtimes python3.9

      - echo "Publishing the simulator layer.."
      - aws lambda publish-layer-version --layer-name RetireRightSimulator --zip-file fileb://simulator.zip --compatible-architectures x86_64 --compatible-runtimes python3.9

      - echo "Retrieving latest versions of lambda layers"
      - >
        latestdomain=`aws lambda list-layer-versions --layer-name RetireRightDomain --max-items 1 | grep LayerVersionArn | sed 's/"LayerVersionArn": "//' | cut -d'"' -f1 | tr -s " "`
      - > 
        latestDynamoUtils=`aws lambda list-layer-versions --layer-name RetireRightDynamoUtils --max-items 1 | grep LayerVersionArn | sed 's/"LayerVersionArn": "//' | cut -d'"' -f1 | tr -s " "`
      - >
        latestWriter=`aws lambda list-layer-versions --layer-name RetireRightWriter --max-items 1 | grep LayerVersionArn | sed 's/"LayerVersionArn": "//' | cut -d'"' -f1 | tr -s " "`
      - >
        latestSimulator=`aws lambda list-layer-versions --layer-name RetireRightSimulator --max-items 1 | grep LayerVersionArn | sed 's/"LayerVersionArn": "//' | cut -d'"' -f1 | tr -s " "`
      
      - echo "Retrieved the following layer ARNs and versions:"
      - echo $latestdomain
      - echo $latestDynamoUtils
      - echo $latestWriter
      - echo $latestSimulator

      - echo "Updating lambda functions.."

      - echo "Updating create-user-lambda.."
      - echo "Updating create-user-lambda to use latest layers it requires.."
      - echo "Updating to use the latest layers"
      - aws lambda update-function-configuration --function-name create-user-lambda --layers ${latestdomain} ${latestDynamoUtils}
      - echo "Sleeping for 30 seconds"
      - sleep 30
      - echo "Updating to use the latest code"
      - aws lambda update-function-code --function-name create-user-lambda --zip-file fileb://create-user-deployment.zip
